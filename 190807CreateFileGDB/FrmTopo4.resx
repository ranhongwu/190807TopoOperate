<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAfwAAgH8AA+B/AA/8fwA///8B////B///8=
</value>
  </data>
</root>